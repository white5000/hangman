# -*- coding: utf-8 -*-
"""第１０章.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16CnMZIn9Z1YsgjXtDdG55b8sUu08X_NS
"""

def hangman(word):
  wrong = 0
  stages = ["", 
            "_________            ", 
            "|                    ", 
            "|        |           ", 
            "|        o           ", 
            "|       /|~          ", 
            "|       //           ", 
            "|                    "]
  rletters = list(word)
  board = ["_"] * len(word)   #出力セルに出すやつ
  win = False
  print("ハングマンへようこそ")

  while wrong < len(stages) - 1:
    print("\n")
    text = input("含まれている文字を予想しよう\n(一文字だけ入力してね):")
    if text in rletters:
      cind = rletters.index(text)   #inputされた文字が何文字目にあるのかインデックス値を取得
      board[cind] = text            #boardの文字を書き換え
      rletters[cind] = "$"          #同じ文字が重複している単語だと、最初の方のインデックス値しかとってこないので、文字を書き換えて対応
    else:
      wrong += 1
    
    print(" ".join(board))
    e = wrong + 1
    print("\n".join(stages[0:e]))
    if "_" not in board:
      print("あなたの勝ち！")
      print(" ".join(board))
      win = True
      break
  
  if not win:   #フラグ管理でしているが、if "_" in board: でよいのでは？コードが増えてしまう、何か理由がある？
    print("\n".join(stages[0:wrong+1]))
    print("あなたの負け！正解は {} 。".format(word))


pokemon_list = ["ケンタロス", "スターミー", "サンダース", "フーディン", "ラプラス", "スリーパー"]
import random
pokemon_name = random.choice(pokemon_list)

hangman(pokemon_name)
# 1、randomモジュールのchoice関数でリストや文字列からランダムに選択して持ってこれる
# 解答だとrandintでリストの要素数分範囲でのランダムな値を出して、それをインデックス値として使うことで実装している